4. Написать класс-оболочку хранилища «Box».
В хранилище можно установить данные (setData($key, $value)), получить данные (getData($key)), сохранить данные (save()) и загрузить данные (load())

$key — произвольный идентификатор данных
$value — скаляные данные или массив

Хранилище состоит из:
- Интерфейс описывающий методы установки данных, получения данных, сохранения и загрузки
- Абстрактный класс AbstractBox содержащий реализацию необходимых общих методов
- Класс FileBox расширяющий абстрактный класс AbstractBox. При вызове save() сохраняет заданные в класс данные в файл. При вызове load() достает данные из файла.
- Класс DbBox расширяющий абстрактный класс AbstractBox. При вызове save() сохраняет заданные в класс данные в базу. При вызове load() достает данные из базы.

Функция load не должна ничего возвращать, должна лишь сохранять полученные данные внутри объекта. Для получения данных служит функция getData($key).

При сохранении данных необходимо учитывать ключи новых данных и тех данных что хранятся в базе(файле), если значение с ключом в базе(файле) уже существует, то нужно его значение заменить на новое.

Классы FileBox и DbBox должен быть реализованы таким образом, чтобы нельзя было создать более одного экземпляра каждого из классов.


=========== MY COMMENT ===========
Делаю иерархию классов/интерфейсов как в задании.
Но вообще, можно обойтись без наследования и сделать просто класс Box в который через композицию передавать объект
BoxPersistenceInterface для работы с постоянным хранилищем данных. BoxInterface, DbBox и FileBox тогда ненужны.
Еще можно убрать функционал save/load из Box, чтобы уменьшить ответственность (поводы для изменения) Box.